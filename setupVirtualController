// Add joystick, buttons, etc.
import SwiftUI
import GameController

@main
struct MyApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
                .onAppear {
                    // Automatically configure and start the Virtual Controller
                    setupVirtualController()
                }
        }
    }
}

struct ContentView: View {
    @State private var controllerStatus: String = "inactive"
    
    var body: some View {
        ZStack {
            // General container to manage layout
            VStack {
                // HStack for the icon on the left, centered text, and buttons on the right
                HStack {
                    // Status icon at the top left
                    if controllerStatus == "active" {
                        Image(systemName: "gamecontroller.fill")
                            .resizable()
                            .frame(width: 55, height: 40)
                            .foregroundColor(.green)
                        Text("ON")
                            .font(.footnote)
                            .foregroundColor(.green)
                    } else {
                        Image(systemName: "gamecontroller")
                            .resizable()
                            .frame(width: 55, height: 40)
                            .foregroundColor(.red)
                        Text("OFF")
                            .font(.footnote)
                            .foregroundColor(.red)
                    }
                    
                    // Centered text
                    Text("GCVirtual Controller Test")
                        .font(.title)
                        .frame(maxWidth: .infinity, alignment: .center)
                    
                    // Buttons on the right side of the screen
                    VStack {
                        HStack {
                            // Disconnect button
                            Button(action: disconnectVirtualController) {
                                VStack {
                                    Image(systemName: "gamecontroller.circle.fill")
                                        .resizable()
                                        .frame(width: 20, height: 20)
                                        .foregroundColor(.red)
                                    Text("OFF")
                                        .font(.footnote)
                                        .foregroundColor(.red)
                                }
                            }
                            
                            // Reconnect button
                            Button(action: reconnectVirtualController) {
                                VStack {
                                    Image(systemName: "gamecontroller.circle")
                                        .resizable()
                                        .frame(width: 20, height: 20)
                                        .foregroundColor(.green)
                                    Text("ON")
                                        .font(.footnote)
                                        .foregroundColor(.green)
                                }
                            }
                            .padding()
                        }
                    }
                    .padding(.trailing) // Right padding for the buttons
                }
                .padding(.top) // Top padding for the screen
                
                Spacer() // Pushes elements toward the bottom of the screen
            }
        }
        .onAppear {
            // Updates the controller status
            updateControllerStatus = { newStatus in
                controllerStatus = newStatus
            }
        }
    }
}

var virtualController: GCVirtualController? // Persistent property for the virtual controller
var updateControllerStatus: ((String) -> Void)? // Closure to update the status from anywhere

func setupVirtualController() {
    // Creates configuration for the virtual controller
    let virtualConfig = GCVirtualController.Configuration()
    
    // Add only the necessary elements (removes the right joystick,etc..)
    virtualConfig.elements = [
        GCInputLeftThumbstick,
        GCInputButtonA,
        GCInputButtonB,
        GCInputButtonX,
        GCInputButtonY,
    ]
    
    // Initialize and connect the virtual controller
    virtualController = GCVirtualController(configuration: virtualConfig)
    virtualController?.connect { error in
        if let error = error {
            print("Error while connecting: \(error.localizedDescription)")
            updateControllerStatus?("inactive")
        } else {
            print("Virtual controller connected successfully.")
            updateControllerStatus?("active")
        }
    }
    
    // Add event handlers for buttons and sticks
    if let gamepad = virtualController?.controller?.extendedGamepad {
        // Handler for button A
        gamepad.buttonA.valueChangedHandler = { _, _, pressed in
            if pressed {
                print("Button A pressed")
            }
        }
        
        // Handler for button B
        gamepad.buttonB.valueChangedHandler = { _, _, pressed in
            if pressed {
                print("Button B pressed")
            }
        }
        
        // Handler for button X
        gamepad.buttonX.valueChangedHandler = { _, _, pressed in
            if pressed {
                print("Button X pressed")
            }
        }
        
        // Handler for button Y
        gamepad.buttonY.valueChangedHandler = { _, _, pressed in
            if pressed {
                print("Button Y pressed")
            }
        }
        
        // Handler for the left thumbstick
        gamepad.leftThumbstick.valueChangedHandler = { _, xValue, yValue in
            print("Left thumbstick moved: x=\(xValue), y=\(yValue)")
        }
    }
}

func disconnectVirtualController() {
    virtualController?.disconnect()
    updateControllerStatus?("inactive")
    print("Virtual controller disconnected.")
}

func reconnectVirtualController() {
    disconnectVirtualController() // Disconnects the existing controller if necessary
    setupVirtualController()      // Reconfigures and reconnects a new controller
    print("Attempting to reconnect the virtual controller...")
}
